#ifndef _DYWOQ_VERSION_WRAPPER
#define _DYWOQ_VERSION_WRAPPER

#include <version>

namespace dywoq::version_wrapper::language {

#if defined(__cpp_aggregate_bases)
inline constexpr long aggregate_bases = __cpp_aggregate_bases;
#else
inline constexpr long aggregate_bases = 0;
#endif

#if defined(__cpp_aggregate_nsdmi)
inline constexpr long aggregate_nsdmi = __cpp_aggregate_nsdmi;
#else
inline constexpr long aggregate_nsdmi = 0;
#endif

#if defined(__cpp_aggregate_paren_init)
inline constexpr long aggregate_paren_init = __cpp_aggregate_paren_init;
#else
inline constexpr long aggregate_paren_init = 0;
#endif

#if defined(__cpp_alias_templates)
inline constexpr long alias_templates = __cpp_alias_templates;
#else
inline constexpr long alias_templates = 0;
#endif

#if defined(__cpp_aligned_new)
inline constexpr long aligned_new = __cpp_aligned_new;
#else
inline constexpr long aligned_new = 0;
#endif

#if defined(__cpp_attributes)
inline constexpr long attributes = __cpp_attributes;
#else
inline constexpr long attributes = 0;
#endif

#if defined(__cpp_auto_cast)
inline constexpr long auto_cast = __cpp_auto_cast;
#else
inline constexpr long auto_cast = 0;
#endif

#if defined(__cpp_binary_literals)
inline constexpr long binary_literals = __cpp_binary_literals;
#else
inline constexpr long binary_literals = 0;
#endif

#if defined(__cpp_capture_star_this)
inline constexpr long capture_star_this = __cpp_capture_star_this;
#else
inline constexpr long capture_star_this = 0;
#endif

#if defined(__cpp_char8_t)
inline constexpr long char8_t_ = __cpp_char8_t;
#else
inline constexpr long char8_t_ = 0;
#endif

#if defined(__cpp_concepts)
inline constexpr long concepts = __cpp_concepts;
#else
inline constexpr long concepts = 0;
#endif

#if defined(__cpp_conditional_explicit)
inline constexpr long conditional_explicit = __cpp_conditional_explicit;
#else
inline constexpr long conditional_explicit = 0;
#endif

#if defined(__cpp_consteval)
inline constexpr long consteval_ = __cpp_consteval;
#else
inline constexpr long consteval_ = 0;
#endif

#if defined(__cpp_constexpr)
inline constexpr long constexpr_feature = __cpp_constexpr;
#else
inline constexpr long constexpr_feature = 0;
#endif

#if defined(__cpp_constexpr_dynamic_alloc)
inline constexpr long constexpr_dynamic_alloc = __cpp_constexpr_dynamic_alloc;
#else
inline constexpr long constexpr_dynamic_alloc = 0;
#endif

#if defined(__cpp_constexpr_exceptions)
inline constexpr long constexpr_exceptions = __cpp_constexpr_exceptions;
#else
inline constexpr long constexpr_exceptions = 0;
#endif

#if defined(__cpp_constexpr_in_decltype)
inline constexpr long constexpr_in_decltype = __cpp_constexpr_in_decltype;
#else
inline constexpr long constexpr_in_decltype = 0;
#endif

#if defined(__cpp_constinit)
inline constexpr long constinit_ = __cpp_constinit;
#else
inline constexpr long constinit_ = 0;
#endif

#if defined(__cpp_contracts)
inline constexpr long contracts = __cpp_contracts;
#else
inline constexpr long contracts = 0;
#endif

#if defined(__cpp_decltype)
inline constexpr long decltype_feature = __cpp_decltype;
#else
inline constexpr long decltype_feature = 0;
#endif

#if defined(__cpp_decltype_auto)
inline constexpr long decltype_auto = __cpp_decltype_auto;
#else
inline constexpr long decltype_auto = 0;
#endif

#if defined(__cpp_deduction_guides)
inline constexpr long deduction_guides = __cpp_deduction_guides;
#else
inline constexpr long deduction_guides = 0;
#endif

#if defined(__cpp_delegating_constructors)
inline constexpr long delegating_constructors = __cpp_delegating_constructors;
#else
inline constexpr long delegating_constructors = 0;
#endif

#if defined(__cpp_deleted_function)
inline constexpr long deleted_function = __cpp_deleted_function;
#else
inline constexpr long deleted_function = 0;
#endif

#if defined(__cpp_designated_initializers)
inline constexpr long designated_initializers = __cpp_designated_initializers;
#else
inline constexpr long designated_initializers = 0;
#endif

#if defined(__cpp_enumerator_attributes)
inline constexpr long enumerator_attributes = __cpp_enumerator_attributes;
#else
inline constexpr long enumerator_attributes = 0;
#endif

#if defined(__cpp_explicit_this_parameter)
inline constexpr long explicit_this_parameter = __cpp_explicit_this_parameter;
#else
inline constexpr long explicit_this_parameter = 0;
#endif

#if defined(__cpp_fold_expressions)
inline constexpr long fold_expressions = __cpp_fold_expressions;
#else
inline constexpr long fold_expressions = 0;
#endif

#if defined(__cpp_generic_lambdas)
inline constexpr long generic_lambdas = __cpp_generic_lambdas;
#else
inline constexpr long generic_lambdas = 0;
#endif

#if defined(__cpp_guaranteed_copy_elision)
inline constexpr long guaranteed_copy_elision = __cpp_guaranteed_copy_elision;
#else
inline constexpr long guaranteed_copy_elision = 0;
#endif

#if defined(__cpp_hex_float)
inline constexpr long hex_float = __cpp_hex_float;
#else
inline constexpr long hex_float = 0;
#endif

#if defined(__cpp_if_consteval)
inline constexpr long if_consteval = __cpp_if_consteval;
#else
inline constexpr long if_consteval = 0;
#endif

#if defined(__cpp_if_constexpr)
inline constexpr long if_constexpr = __cpp_if_constexpr;
#else
inline constexpr long if_constexpr = 0;
#endif

#if defined(__cpp_impl_coroutine)
inline constexpr long impl_coroutine = __cpp_impl_coroutine;
#else
inline constexpr long impl_coroutine = 0;
#endif

#if defined(__cpp_impl_destroying_delete)
inline constexpr long impl_destroying_delete = __cpp_impl_destroying_delete;
#else
inline constexpr long impl_destroying_delete = 0;
#endif

#if defined(__cpp_impl_three_way_comparison)
inline constexpr long impl_three_way_comparison = __cpp_impl_three_way_comparison;
#else
inline constexpr long impl_three_way_comparison = 0;
#endif

#if defined(__cpp_implicit_move)
inline constexpr long implicit_move = __cpp_implicit_move;
#else
inline constexpr long implicit_move = 0;
#endif

#if defined(__cpp_inheriting_constructors)
inline constexpr long inheriting_constructors = __cpp_inheriting_constructors;
#else
inline constexpr long inheriting_constructors = 0;
#endif

#if defined(__cpp_init_captures)
inline constexpr long init_captures = __cpp_init_captures;
#else
inline constexpr long init_captures = 0;
#endif

#if defined(__cpp_initializer_lists)
inline constexpr long initializer_lists = __cpp_initializer_lists;
#else
inline constexpr long initializer_lists = 0;
#endif

#if defined(__cpp_inline_variables)
inline constexpr long inline_variables = __cpp_inline_variables;
#else
inline constexpr long inline_variables = 0;
#endif

#if defined(__cpp_lambdas)
inline constexpr long lambdas = __cpp_lambdas;
#else
inline constexpr long lambdas = 0;
#endif

#if defined(__cpp_modules)
inline constexpr long modules = __cpp_modules;
#else
inline constexpr long modules = 0;
#endif

#if defined(__cpp_multidimensional_subscript)
inline constexpr long multidimensional_subscript = __cpp_multidimensional_subscript;
#else
inline constexpr long multidimensional_subscript = 0;
#endif

#if defined(__cpp_named_character_escapes)
inline constexpr long named_character_escapes = __cpp_named_character_escapes;
#else
inline constexpr long named_character_escapes = 0;
#endif

#if defined(__cpp_namespace_attributes)
inline constexpr long namespace_attributes = __cpp_namespace_attributes;
#else
inline constexpr long namespace_attributes = 0;
#endif

#if defined(__cpp_noexcept_function_type)
inline constexpr long noexcept_function_type = __cpp_noexcept_function_type;
#else
inline constexpr long noexcept_function_type = 0;
#endif

#if defined(__cpp_nontype_template_args)
inline constexpr long nontype_template_args = __cpp_nontype_template_args;
#else
inline constexpr long nontype_template_args = 0;
#endif

#if defined(__cpp_nontype_template_parameter_auto)
inline constexpr long nontype_template_parameter_auto = __cpp_nontype_template_parameter_auto;
#else
inline constexpr long nontype_template_parameter_auto = 0;
#endif

#if defined(__cpp_nsdmi)
inline constexpr long nsdmi = __cpp_nsdmi;
#else
inline constexpr long nsdmi = 0;
#endif

#if defined(__cpp_pack_indexing)
inline constexpr long pack_indexing = __cpp_pack_indexing;
#else
inline constexpr long pack_indexing = 0;
#endif

#if defined(__cpp_placeholder_variables)
inline constexpr long placeholder_variables = __cpp_placeholder_variables;
#else
inline constexpr long placeholder_variables = 0;
#endif

#if defined(__cpp_pp_embed)
inline constexpr long pp_embed = __cpp_pp_embed;
#else
inline constexpr long pp_embed = 0;
#endif

#if defined(__cpp_range_based_for)
inline constexpr long range_based_for = __cpp_range_based_for;
#else
inline constexpr long range_based_for = 0;
#endif

#if defined(__cpp_raw_strings)
inline constexpr long raw_strings = __cpp_raw_strings;
#else
inline constexpr long raw_strings = 0;
#endif

#if defined(__cpp_ref_qualifiers)
inline constexpr long ref_qualifiers = __cpp_ref_qualifiers;
#else
inline constexpr long ref_qualifiers = 0;
#endif

#if defined(__cpp_return_type_deduction)
inline constexpr long return_type_deduction = __cpp_return_type_deduction;
#else
inline constexpr long return_type_deduction = 0;
#endif

#if defined(__cpp_rvalue_references)
inline constexpr long rvalue_references = __cpp_rvalue_references;
#else
inline constexpr long rvalue_references = 0;
#endif

#if defined(__cpp_size_t_suffix)
inline constexpr long size_t_suffix = __cpp_size_t_suffix;
#else
inline constexpr long size_t_suffix = 0;
#endif

#if defined(__cpp_sized_deallocation)
inline constexpr long sized_deallocation = __cpp_sized_deallocation;
#else
inline constexpr long sized_deallocation = 0;
#endif

#if defined(__cpp_static_assert)
inline constexpr long static_assert_feature = __cpp_static_assert;
#else
inline constexpr long static_assert_feature = 0;
#endif

#if defined(__cpp_static_call_operator)
inline constexpr long static_call_operator = __cpp_static_call_operator;
#else
inline constexpr long static_call_operator = 0;
#endif

#if defined(__cpp_structured_bindings)
inline constexpr long structured_bindings = __cpp_structured_bindings;
#else
inline constexpr long structured_bindings = 0;
#endif

#if defined(__cpp_template_parameters)
inline constexpr long template_parameters = __cpp_template_parameters;
#else
inline constexpr long template_parameters = 0;
#endif

#if defined(__cpp_template_template_args)
inline constexpr long template_template_args = __cpp_template_template_args;
#else
inline constexpr long template_template_args = 0;
#endif

#if defined(__cpp_threadsafe_static_init)
inline constexpr long threadsafe_static_init = __cpp_threadsafe_static_init;
#else
inline constexpr long threadsafe_static_init = 0;
#endif

#if defined(__cpp_trivial_relocatability)
inline constexpr long trivial_relocatability = __cpp_trivial_relocatability;
#else
inline constexpr long trivial_relocatability = 0;
#endif

#if defined(__cpp_trivial_union)
inline constexpr long trivial_union = __cpp_trivial_union;
#else
inline constexpr long trivial_union = 0;
#endif

#if defined(__cpp_unicode_characters)
inline constexpr long unicode_characters = __cpp_unicode_characters;
#else
inline constexpr long unicode_characters = 0;
#endif

#if defined(__cpp_unicode_literals)
inline constexpr long unicode_literals = __cpp_unicode_literals;
#else
inline constexpr long unicode_literals = 0;
#endif

#if defined(__cpp_user_defined_literals)
inline constexpr long user_defined_literals = __cpp_user_defined_literals;
#else
inline constexpr long user_defined_literals = 0;
#endif

#if defined(__cpp_using_enum)
inline constexpr long using_enum = __cpp_using_enum;
#else
inline constexpr long using_enum = 0;
#endif

#if defined(__cpp_variable_templates)
inline constexpr long variable_templates = __cpp_variable_templates;
#else
inline constexpr long variable_templates = 0;
#endif

#if defined(__cpp_variadic_friend)
inline constexpr long variadic_friend = __cpp_variadic_friend;
#else
inline constexpr long variadic_friend = 0;
#endif

#if defined(__cpp_variadic_templates)
inline constexpr long variadic_templates = __cpp_variadic_templates;
#else
inline constexpr long variadic_templates = 0;
#endif

#if defined(__cpp_variadic_using)
inline constexpr long variadic_using = __cpp_variadic_using;
#else
inline constexpr long variadic_using = 0;
#endif

} // namespace dywoq::version_wrapper::language

#endif